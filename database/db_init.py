#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Module d'initialisation de la base de donn√©es

Ce module g√®re la cr√©ation et l'initialisation de la base de donn√©es SQLite3
pour l'application YouTube Data Analyzer.
"""

import os
import sqlite3
from pathlib import Path
import logging

# Configuration du logging
logging.basicConfig(level=logging.INFO, 
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def initialize_database(db_path):
    """
    Initialise la base de donn√©es en cr√©ant les tables n√©cessaires
    √† partir du fichier schema.sql.
    
    Args:
        db_path (str): Chemin vers le fichier de base de donn√©es SQLite3
    
    Returns:
        bool: True si l'initialisation a r√©ussi, False sinon
    """
    try:
        # Cr√©ation du r√©pertoire parent si n√©cessaire
        os.makedirs(os.path.dirname(db_path), exist_ok=True)
        
        # Connexion √† la base de donn√©es
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # Lecture du fichier schema.sql
        schema_path = Path(__file__).parent / 'schema.sql'
        with open(schema_path, 'r', encoding='utf-8') as f:
            schema_script = f.read()
        
        # Ex√©cution du script SQL
        cursor.executescript(schema_script)
        
        # Insertion de presets par d√©faut si la table est vide
        cursor.execute("SELECT COUNT(*) FROM presets")
        if cursor.fetchone()[0] == 0:
            create_default_presets(cursor)
        
        # Validation des changements
        conn.commit()
        conn.close()
        
        logger.info(f"Base de donn√©es initialis√©e avec succ√®s: {db_path}")
        return True
    
    except Exception as e:
        logger.error(f"Erreur lors de l'initialisation de la base de donn√©es: {str(e)}")
        return False


def create_default_presets(cursor):
    """
    Cr√©e des presets par d√©faut dans la base de donn√©es avec informations √©tendues.
    
    Args:
        cursor: Curseur SQLite3 actif
    """
    default_presets = [
        {
            'name': 'Informations de base üìã',
            'description': 'Nom de la vid√©o, auteur, descriptif, thumbnail\nExtraction rapide et l√©g√®re\nId√©al pour un aper√ßu g√©n√©ral',
            'content_type': 'auto',
            'filters': '{"extended_info": false, "fields": ["title", "channel_title", "description", "thumbnail_url", "published_at", "duration"]}',
            'llm_model': 'gpt-3.5-turbo',
            'image_model': 'stable-diffusion',
            'export_format': 'json',
            'ui_template': 'basic',
            'is_default': 1
        },
        {
            'name': 'Analyse compl√®te avec statistiques üìä',
            'description': 'Toutes les informations de base + statistiques de performance\nVues, likes, commentaires, tags, cat√©gories\nM√©tadonn√©es importantes (langue, sous-titres, confidentialit√©)',
            'content_type': 'auto',
            'filters': '{"extended_info": true, "fields": ["title", "channel_title", "description", "thumbnail_url", "published_at", "duration", "view_count", "like_count", "comment_count", "tags", "category_id", "language", "definition", "caption", "privacy_status", "topic_categories", "default_audio_language"]}',
            'llm_model': 'claude-3-sonnet',
            'image_model': 'stable-diffusion',
            'export_format': 'xlsx',
            'ui_template': 'detailed',
            'is_default': 0
        },
        {
            'name': 'Analyse technique avanc√©e üî¨',
            'description': 'Extraction compl√®te de toutes les m√©tadonn√©es disponibles\nD√©tails techniques, streaming en direct, enregistrement\nMiniatures haute r√©solution, licences, projections 360¬∞',
            'content_type': 'auto',
            'filters': '{"extended_info": true, "fields": ["title", "channel_title", "description", "thumbnail_url", "published_at", "duration", "view_count", "like_count", "comment_count", "tags", "category_id", "language", "definition", "caption", "licensed_content", "dimension", "projection", "privacy_status", "upload_status", "license", "embeddable", "public_stats_viewable", "topic_categories", "relevant_topic_ids", "default_audio_language", "live_broadcast_content", "thumbnails_standard", "thumbnails_maxres", "actual_start_time", "actual_end_time", "scheduled_start_time", "concurrent_viewers", "recording_date", "location_description"]}',
            'llm_model': 'gpt-4',
            'image_model': 'midjourney-api',
            'export_format': 'json',
            'ui_template': 'advanced',
            'is_default': 0
        }
    ]
    
    for preset in default_presets:
        cursor.execute("""
        INSERT INTO presets (name, description, content_type, filters, 
                           llm_model, image_model, export_format, ui_template, is_default)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            preset['name'],
            preset['description'],
            preset['content_type'],
            preset['filters'],
            preset['llm_model'],
            preset['image_model'],
            preset['export_format'],
            preset['ui_template'],
            preset['is_default']
        ))
    
    logger.info("Presets par d√©faut cr√©√©s avec succ√®s")


def get_connection(db_path):
    """
    √âtablit une connexion √† la base de donn√©es.
    
    Args:
        db_path (str): Chemin vers le fichier de base de donn√©es SQLite3
    
    Returns:
        sqlite3.Connection: Objet de connexion √† la base de donn√©es
    """
    conn = sqlite3.connect(db_path)
    conn.row_factory = sqlite3.Row  # Pour acc√©der aux colonnes par nom
    return conn